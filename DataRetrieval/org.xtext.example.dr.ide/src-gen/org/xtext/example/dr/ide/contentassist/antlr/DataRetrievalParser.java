/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.dr.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.dr.ide.contentassist.antlr.internal.InternalDataRetrievalParser;
import org.xtext.example.dr.services.DataRetrievalGrammarAccess;

public class DataRetrievalParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DataRetrievalGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DataRetrievalGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getRenameAccess().getAlternatives(), "rule__Rename__Alternatives");
			builder.put(grammarAccess.getRenameAllAccess().getAlternatives(), "rule__RenameAll__Alternatives");
			builder.put(grammarAccess.getThresholdAccess().getAlternatives(), "rule__Threshold__Alternatives");
			builder.put(grammarAccess.getOpTypeAccess().getAlternatives_0(), "rule__OpType__Alternatives_0");
			builder.put(grammarAccess.getOpTypeAccess().getAlternatives_1(), "rule__OpType__Alternatives_1");
			builder.put(grammarAccess.getRetrieveAccess().getGroup(), "rule__Retrieve__Group__0");
			builder.put(grammarAccess.getDestAccess().getGroup(), "rule__Dest__Group__0");
			builder.put(grammarAccess.getSourceFolderAccess().getGroup(), "rule__SourceFolder__Group__0");
			builder.put(grammarAccess.getConfigListAccess().getGroup(), "rule__ConfigList__Group__0");
			builder.put(grammarAccess.getConfigListAccess().getGroup_6(), "rule__ConfigList__Group_6__0");
			builder.put(grammarAccess.getOpListAccess().getGroup(), "rule__OpList__Group__0");
			builder.put(grammarAccess.getSourceAccess().getGroup(), "rule__Source__Group__0");
			builder.put(grammarAccess.getPathAccess().getGroup(), "rule__Path__Group__0");
			builder.put(grammarAccess.getKeysToExtractAccess().getGroup(), "rule__KeysToExtract__Group__0");
			builder.put(grammarAccess.getKeysToExtractAccess().getGroup_3(), "rule__KeysToExtract__Group_3__0");
			builder.put(grammarAccess.getKeyAccess().getGroup(), "rule__Key__Group__0");
			builder.put(grammarAccess.getKeyAccess().getGroup_1(), "rule__Key__Group_1__0");
			builder.put(grammarAccess.getFullRenameAccess().getGroup(), "rule__FullRename__Group__0");
			builder.put(grammarAccess.getAddPrefixAccess().getGroup(), "rule__AddPrefix__Group__0");
			builder.put(grammarAccess.getAddSuffixAccess().getGroup(), "rule__AddSuffix__Group__0");
			builder.put(grammarAccess.getFilterAccess().getGroup(), "rule__Filter__Group__0");
			builder.put(grammarAccess.getTopNAccess().getGroup(), "rule__TopN__Group__0");
			builder.put(grammarAccess.getBottomNAccess().getGroup(), "rule__BottomN__Group__0");
			builder.put(grammarAccess.getOpTypeAccess().getGroup(), "rule__OpType__Group__0");
			builder.put(grammarAccess.getOpTypeAccess().getGroup_1_1(), "rule__OpType__Group_1_1__0");
			builder.put(grammarAccess.getOpTypeAccess().getGroup_1_1_2(), "rule__OpType__Group_1_1_2__0");
			builder.put(grammarAccess.getRetrieveAccess().getDestAssignment_1(), "rule__Retrieve__DestAssignment_1");
			builder.put(grammarAccess.getRetrieveAccess().getSourceFolderAssignment_2(), "rule__Retrieve__SourceFolderAssignment_2");
			builder.put(grammarAccess.getRetrieveAccess().getConfigListAssignment_4(), "rule__Retrieve__ConfigListAssignment_4");
			builder.put(grammarAccess.getRetrieveAccess().getOpListAssignment_5(), "rule__Retrieve__OpListAssignment_5");
			builder.put(grammarAccess.getDestAccess().getNameAssignment_1(), "rule__Dest__NameAssignment_1");
			builder.put(grammarAccess.getSourceFolderAccess().getNameAssignment_1(), "rule__SourceFolder__NameAssignment_1");
			builder.put(grammarAccess.getConfigListAccess().getSourceAssignment_2(), "rule__ConfigList__SourceAssignment_2");
			builder.put(grammarAccess.getConfigListAccess().getPathAssignment_3(), "rule__ConfigList__PathAssignment_3");
			builder.put(grammarAccess.getConfigListAccess().getKeysToExtractAssignment_4(), "rule__ConfigList__KeysToExtractAssignment_4");
			builder.put(grammarAccess.getConfigListAccess().getRenameAllAssignment_5(), "rule__ConfigList__RenameAllAssignment_5");
			builder.put(grammarAccess.getConfigListAccess().getFilterAssignment_6_0(), "rule__ConfigList__FilterAssignment_6_0");
			builder.put(grammarAccess.getConfigListAccess().getThresholdAssignment_6_1(), "rule__ConfigList__ThresholdAssignment_6_1");
			builder.put(grammarAccess.getOpListAccess().getOpTypeAssignment_2(), "rule__OpList__OpTypeAssignment_2");
			builder.put(grammarAccess.getSourceAccess().getNameAssignment_1(), "rule__Source__NameAssignment_1");
			builder.put(grammarAccess.getPathAccess().getNameAssignment_1(), "rule__Path__NameAssignment_1");
			builder.put(grammarAccess.getKeysToExtractAccess().getKey1Assignment_2(), "rule__KeysToExtract__Key1Assignment_2");
			builder.put(grammarAccess.getKeysToExtractAccess().getKey1Assignment_3_1(), "rule__KeysToExtract__Key1Assignment_3_1");
			builder.put(grammarAccess.getKeyAccess().getNameAssignment_0(), "rule__Key__NameAssignment_0");
			builder.put(grammarAccess.getKeyAccess().getRenameAssignment_1_1(), "rule__Key__RenameAssignment_1_1");
			builder.put(grammarAccess.getFullRenameAccess().getNameAssignment_1(), "rule__FullRename__NameAssignment_1");
			builder.put(grammarAccess.getFullRenameAccess().getNAssignment_2(), "rule__FullRename__NAssignment_2");
			builder.put(grammarAccess.getAddPrefixAccess().getNameAssignment_1(), "rule__AddPrefix__NameAssignment_1");
			builder.put(grammarAccess.getAddSuffixAccess().getNameAssignment_1(), "rule__AddSuffix__NameAssignment_1");
			builder.put(grammarAccess.getFilterAccess().getNameAssignment_1(), "rule__Filter__NameAssignment_1");
			builder.put(grammarAccess.getTopNAccess().getValueAssignment_1(), "rule__TopN__ValueAssignment_1");
			builder.put(grammarAccess.getBottomNAccess().getValueAssignment_1(), "rule__BottomN__ValueAssignment_1");
			builder.put(grammarAccess.getOpTypeAccess().getAverageAssignment_0_0(), "rule__OpType__AverageAssignment_0_0");
			builder.put(grammarAccess.getOpTypeAccess().getSumAssignment_0_1(), "rule__OpType__SumAssignment_0_1");
			builder.put(grammarAccess.getOpTypeAccess().getAllAssignment_1_0(), "rule__OpType__AllAssignment_1_0");
			builder.put(grammarAccess.getOpTypeAccess().getKey1Assignment_1_1_1(), "rule__OpType__Key1Assignment_1_1_1");
			builder.put(grammarAccess.getOpTypeAccess().getKey1Assignment_1_1_2_1(), "rule__OpType__Key1Assignment_1_1_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DataRetrievalGrammarAccess grammarAccess;

	@Override
	protected InternalDataRetrievalParser createParser() {
		InternalDataRetrievalParser result = new InternalDataRetrievalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DataRetrievalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DataRetrievalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
