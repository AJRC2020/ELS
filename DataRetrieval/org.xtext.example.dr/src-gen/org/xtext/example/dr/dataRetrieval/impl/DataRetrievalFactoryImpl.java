/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.dr.dataRetrieval.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.dr.dataRetrieval.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DataRetrievalFactoryImpl extends EFactoryImpl implements DataRetrievalFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DataRetrievalFactory init()
  {
    try
    {
      DataRetrievalFactory theDataRetrievalFactory = (DataRetrievalFactory)EPackage.Registry.INSTANCE.getEFactory(DataRetrievalPackage.eNS_URI);
      if (theDataRetrievalFactory != null)
      {
        return theDataRetrievalFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DataRetrievalFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataRetrievalFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DataRetrievalPackage.RETRIEVE: return createRetrieve();
      case DataRetrievalPackage.DEST: return createDest();
      case DataRetrievalPackage.SOURCE_FOLDER: return createSourceFolder();
      case DataRetrievalPackage.CONFIG_LIST: return createConfigList();
      case DataRetrievalPackage.OP_LIST: return createOpList();
      case DataRetrievalPackage.SOURCE: return createSource();
      case DataRetrievalPackage.PATH: return createPath();
      case DataRetrievalPackage.KEYS_TO_EXTRACT: return createKeysToExtract();
      case DataRetrievalPackage.KEY: return createKey();
      case DataRetrievalPackage.RENAME: return createRename();
      case DataRetrievalPackage.RENAME_ALL: return createRenameAll();
      case DataRetrievalPackage.FULL_RENAME: return createFullRename();
      case DataRetrievalPackage.ADD_PREFIX: return createAddPrefix();
      case DataRetrievalPackage.ADD_SUFFIX: return createAddSuffix();
      case DataRetrievalPackage.FILTER: return createFilter();
      case DataRetrievalPackage.THRESHOLD: return createThreshold();
      case DataRetrievalPackage.TOP_N: return createTopN();
      case DataRetrievalPackage.BOTTOM_N: return createBottomN();
      case DataRetrievalPackage.OP_TYPE: return createOpType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Retrieve createRetrieve()
  {
    RetrieveImpl retrieve = new RetrieveImpl();
    return retrieve;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dest createDest()
  {
    DestImpl dest = new DestImpl();
    return dest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SourceFolder createSourceFolder()
  {
    SourceFolderImpl sourceFolder = new SourceFolderImpl();
    return sourceFolder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigList createConfigList()
  {
    ConfigListImpl configList = new ConfigListImpl();
    return configList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpList createOpList()
  {
    OpListImpl opList = new OpListImpl();
    return opList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Source createSource()
  {
    SourceImpl source = new SourceImpl();
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Path createPath()
  {
    PathImpl path = new PathImpl();
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KeysToExtract createKeysToExtract()
  {
    KeysToExtractImpl keysToExtract = new KeysToExtractImpl();
    return keysToExtract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Key createKey()
  {
    KeyImpl key = new KeyImpl();
    return key;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rename createRename()
  {
    RenameImpl rename = new RenameImpl();
    return rename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RenameAll createRenameAll()
  {
    RenameAllImpl renameAll = new RenameAllImpl();
    return renameAll;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FullRename createFullRename()
  {
    FullRenameImpl fullRename = new FullRenameImpl();
    return fullRename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddPrefix createAddPrefix()
  {
    AddPrefixImpl addPrefix = new AddPrefixImpl();
    return addPrefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddSuffix createAddSuffix()
  {
    AddSuffixImpl addSuffix = new AddSuffixImpl();
    return addSuffix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Filter createFilter()
  {
    FilterImpl filter = new FilterImpl();
    return filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Threshold createThreshold()
  {
    ThresholdImpl threshold = new ThresholdImpl();
    return threshold;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TopN createTopN()
  {
    TopNImpl topN = new TopNImpl();
    return topN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BottomN createBottomN()
  {
    BottomNImpl bottomN = new BottomNImpl();
    return bottomN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpType createOpType()
  {
    OpTypeImpl opType = new OpTypeImpl();
    return opType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataRetrievalPackage getDataRetrievalPackage()
  {
    return (DataRetrievalPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DataRetrievalPackage getPackage()
  {
    return DataRetrievalPackage.eINSTANCE;
  }

} //DataRetrievalFactoryImpl
