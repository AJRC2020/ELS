/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.dr.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.dr.dataRetrieval.AddPrefix;
import org.xtext.example.dr.dataRetrieval.AddSuffix;
import org.xtext.example.dr.dataRetrieval.BottomN;
import org.xtext.example.dr.dataRetrieval.ConfigList;
import org.xtext.example.dr.dataRetrieval.DataRetrievalPackage;
import org.xtext.example.dr.dataRetrieval.Dest;
import org.xtext.example.dr.dataRetrieval.Filter;
import org.xtext.example.dr.dataRetrieval.FullRename;
import org.xtext.example.dr.dataRetrieval.Key;
import org.xtext.example.dr.dataRetrieval.KeysToExtract;
import org.xtext.example.dr.dataRetrieval.OpList;
import org.xtext.example.dr.dataRetrieval.OpType;
import org.xtext.example.dr.dataRetrieval.Path;
import org.xtext.example.dr.dataRetrieval.Retrieve;
import org.xtext.example.dr.dataRetrieval.Source;
import org.xtext.example.dr.dataRetrieval.SourceFolder;
import org.xtext.example.dr.dataRetrieval.TopN;
import org.xtext.example.dr.services.DataRetrievalGrammarAccess;

@SuppressWarnings("all")
public class DataRetrievalSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DataRetrievalGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DataRetrievalPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DataRetrievalPackage.ADD_PREFIX:
				sequence_AddPrefix(context, (AddPrefix) semanticObject); 
				return; 
			case DataRetrievalPackage.ADD_SUFFIX:
				sequence_AddSuffix(context, (AddSuffix) semanticObject); 
				return; 
			case DataRetrievalPackage.BOTTOM_N:
				sequence_BottomN(context, (BottomN) semanticObject); 
				return; 
			case DataRetrievalPackage.CONFIG_LIST:
				sequence_ConfigList(context, (ConfigList) semanticObject); 
				return; 
			case DataRetrievalPackage.DEST:
				sequence_Dest(context, (Dest) semanticObject); 
				return; 
			case DataRetrievalPackage.FILTER:
				sequence_Filter(context, (Filter) semanticObject); 
				return; 
			case DataRetrievalPackage.FULL_RENAME:
				sequence_FullRename(context, (FullRename) semanticObject); 
				return; 
			case DataRetrievalPackage.KEY:
				sequence_Key(context, (Key) semanticObject); 
				return; 
			case DataRetrievalPackage.KEYS_TO_EXTRACT:
				sequence_KeysToExtract(context, (KeysToExtract) semanticObject); 
				return; 
			case DataRetrievalPackage.OP_LIST:
				sequence_OpList(context, (OpList) semanticObject); 
				return; 
			case DataRetrievalPackage.OP_TYPE:
				sequence_OpType(context, (OpType) semanticObject); 
				return; 
			case DataRetrievalPackage.PATH:
				sequence_Path(context, (Path) semanticObject); 
				return; 
			case DataRetrievalPackage.RETRIEVE:
				sequence_Retrieve(context, (Retrieve) semanticObject); 
				return; 
			case DataRetrievalPackage.SOURCE:
				sequence_Source(context, (Source) semanticObject); 
				return; 
			case DataRetrievalPackage.SOURCE_FOLDER:
				sequence_SourceFolder(context, (SourceFolder) semanticObject); 
				return; 
			case DataRetrievalPackage.TOP_N:
				sequence_TopN(context, (TopN) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Rename returns AddPrefix
	 *     RenameAll returns AddPrefix
	 *     AddPrefix returns AddPrefix
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_AddPrefix(ISerializationContext context, AddPrefix semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataRetrievalPackage.Literals.RENAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataRetrievalPackage.Literals.RENAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddPrefixAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Rename returns AddSuffix
	 *     RenameAll returns AddSuffix
	 *     AddSuffix returns AddSuffix
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_AddSuffix(ISerializationContext context, AddSuffix semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataRetrievalPackage.Literals.RENAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataRetrievalPackage.Literals.RENAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddSuffixAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Threshold returns BottomN
	 *     BottomN returns BottomN
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_BottomN(ISerializationContext context, BottomN semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataRetrievalPackage.Literals.THRESHOLD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataRetrievalPackage.Literals.THRESHOLD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBottomNAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigList returns ConfigList
	 *
	 * Constraint:
	 *     (source=Source path=Path? keysToExtract=KeysToExtract? renameAll=RenameAll? (filter=Filter threshold=Threshold)?)
	 * </pre>
	 */
	protected void sequence_ConfigList(ISerializationContext context, ConfigList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Dest returns Dest
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Dest(ISerializationContext context, Dest semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataRetrievalPackage.Literals.DEST__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataRetrievalPackage.Literals.DEST__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDestAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Filter returns Filter
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Filter(ISerializationContext context, Filter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataRetrievalPackage.Literals.FILTER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataRetrievalPackage.Literals.FILTER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFilterAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Rename returns FullRename
	 *     FullRename returns FullRename
	 *
	 * Constraint:
	 *     (name=STRING n='N'?)
	 * </pre>
	 */
	protected void sequence_FullRename(ISerializationContext context, FullRename semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Key returns Key
	 *
	 * Constraint:
	 *     (name=STRING rename=Rename?)
	 * </pre>
	 */
	protected void sequence_Key(ISerializationContext context, Key semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     KeysToExtract returns KeysToExtract
	 *
	 * Constraint:
	 *     (key1+=Key key1+=Key*)
	 * </pre>
	 */
	protected void sequence_KeysToExtract(ISerializationContext context, KeysToExtract semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OpList returns OpList
	 *
	 * Constraint:
	 *     opType=OpType
	 * </pre>
	 */
	protected void sequence_OpList(ISerializationContext context, OpList semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataRetrievalPackage.Literals.OP_LIST__OP_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataRetrievalPackage.Literals.OP_LIST__OP_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOpListAccess().getOpTypeOpTypeParserRuleCall_2_0(), semanticObject.getOpType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OpType returns OpType
	 *
	 * Constraint:
	 *     ((average='average=' | sum='sum=') (all='all' | (key1+=Key key1+=Key*)))
	 * </pre>
	 */
	protected void sequence_OpType(ISerializationContext context, OpType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Path returns Path
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Path(ISerializationContext context, Path semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataRetrievalPackage.Literals.PATH__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataRetrievalPackage.Literals.PATH__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPathAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Retrieve returns Retrieve
	 *
	 * Constraint:
	 *     (dest=Dest sourceFolder=SourceFolder? configList+=ConfigList+ opList+=OpList*)
	 * </pre>
	 */
	protected void sequence_Retrieve(ISerializationContext context, Retrieve semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SourceFolder returns SourceFolder
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_SourceFolder(ISerializationContext context, SourceFolder semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataRetrievalPackage.Literals.SOURCE_FOLDER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataRetrievalPackage.Literals.SOURCE_FOLDER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSourceFolderAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Source returns Source
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Source(ISerializationContext context, Source semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataRetrievalPackage.Literals.SOURCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataRetrievalPackage.Literals.SOURCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSourceAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Threshold returns TopN
	 *     TopN returns TopN
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_TopN(ISerializationContext context, TopN semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataRetrievalPackage.Literals.THRESHOLD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataRetrievalPackage.Literals.THRESHOLD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTopNAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
