/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.dr.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DataRetrievalGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RetrieveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.Retrieve");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRetrieveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDestDestParserRuleCall_1_0 = (RuleCall)cDestAssignment_1.eContents().get(0);
		private final Assignment cSourceFolderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceFolderSourceFolderParserRuleCall_2_0 = (RuleCall)cSourceFolderAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConfigListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConfigListConfigListParserRuleCall_4_0 = (RuleCall)cConfigListAssignment_4.eContents().get(0);
		private final Assignment cOpListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOpListOpListParserRuleCall_5_0 = (RuleCall)cOpListAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Main rule
		//Retrieve:
		//    'retrieve' dest=Dest (sourceFolder=SourceFolder)? '{' configList+=ConfigList+ opList+=OpList* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'retrieve' dest=Dest (sourceFolder=SourceFolder)? '{' configList+=ConfigList+ opList+=OpList* '}'
		public Group getGroup() { return cGroup; }
		
		//'retrieve'
		public Keyword getRetrieveKeyword_0() { return cRetrieveKeyword_0; }
		
		//dest=Dest
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }
		
		//Dest
		public RuleCall getDestDestParserRuleCall_1_0() { return cDestDestParserRuleCall_1_0; }
		
		//(sourceFolder=SourceFolder)?
		public Assignment getSourceFolderAssignment_2() { return cSourceFolderAssignment_2; }
		
		//SourceFolder
		public RuleCall getSourceFolderSourceFolderParserRuleCall_2_0() { return cSourceFolderSourceFolderParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//configList+=ConfigList+
		public Assignment getConfigListAssignment_4() { return cConfigListAssignment_4; }
		
		//ConfigList
		public RuleCall getConfigListConfigListParserRuleCall_4_0() { return cConfigListConfigListParserRuleCall_4_0; }
		
		//opList+=OpList*
		public Assignment getOpListAssignment_5() { return cOpListAssignment_5; }
		
		//OpList
		public RuleCall getOpListOpListParserRuleCall_5_0() { return cOpListOpListParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.Dest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestinationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Sets the path where the retrieved data will be written
		//Dest:
		//    'destination=' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'destination=' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'destination='
		public Keyword getDestinationKeyword_0() { return cDestinationKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class SourceFolderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.SourceFolder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFolderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Can be used if there is an operation to be repeated for every directory inside a certain directory
		//SourceFolder:
		//    'folder=' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'folder=' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'folder='
		public Keyword getFolderKeyword_0() { return cFolderKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class ConfigListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.ConfigList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtractionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceSourceParserRuleCall_2_0 = (RuleCall)cSourceAssignment_2.eContents().get(0);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathPathParserRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		private final Assignment cKeysToExtractAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeysToExtractKeysToExtractParserRuleCall_4_0 = (RuleCall)cKeysToExtractAssignment_4.eContents().get(0);
		private final Assignment cRenameAllAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRenameAllRenameAllParserRuleCall_5_0 = (RuleCall)cRenameAllAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cFilterAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cFilterFilterParserRuleCall_6_0_0 = (RuleCall)cFilterAssignment_6_0.eContents().get(0);
		private final Assignment cThresholdAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cThresholdThresholdParserRuleCall_6_1_0 = (RuleCall)cThresholdAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// List of configurations for data extraction
		//ConfigList:
		//    'extraction' '{' source=Source (path=Path)? (keysToExtract=KeysToExtract)? (renameAll=RenameAll)? (filter=Filter threshold=Threshold)?'}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'extraction' '{' source=Source (path=Path)? (keysToExtract=KeysToExtract)? (renameAll=RenameAll)? (filter=Filter threshold=Threshold)?'}'
		public Group getGroup() { return cGroup; }
		
		//'extraction'
		public Keyword getExtractionKeyword_0() { return cExtractionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//source=Source
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//Source
		public RuleCall getSourceSourceParserRuleCall_2_0() { return cSourceSourceParserRuleCall_2_0; }
		
		//(path=Path)?
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }
		
		//Path
		public RuleCall getPathPathParserRuleCall_3_0() { return cPathPathParserRuleCall_3_0; }
		
		//(keysToExtract=KeysToExtract)?
		public Assignment getKeysToExtractAssignment_4() { return cKeysToExtractAssignment_4; }
		
		//KeysToExtract
		public RuleCall getKeysToExtractKeysToExtractParserRuleCall_4_0() { return cKeysToExtractKeysToExtractParserRuleCall_4_0; }
		
		//(renameAll=RenameAll)?
		public Assignment getRenameAllAssignment_5() { return cRenameAllAssignment_5; }
		
		//RenameAll
		public RuleCall getRenameAllRenameAllParserRuleCall_5_0() { return cRenameAllRenameAllParserRuleCall_5_0; }
		
		//(filter=Filter threshold=Threshold)?
		public Group getGroup_6() { return cGroup_6; }
		
		//filter=Filter
		public Assignment getFilterAssignment_6_0() { return cFilterAssignment_6_0; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_6_0_0() { return cFilterFilterParserRuleCall_6_0_0; }
		
		//threshold=Threshold
		public Assignment getThresholdAssignment_6_1() { return cThresholdAssignment_6_1; }
		
		//Threshold
		public RuleCall getThresholdThresholdParserRuleCall_6_1_0() { return cThresholdThresholdParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class OpListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.OpList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpTypeOpTypeParserRuleCall_2_0 = (RuleCall)cOpTypeAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// List of operations to perform on the table of extracted data
		//OpList:
		//    'operation' '{' opType=OpType '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'operation' '{' opType=OpType '}'
		public Group getGroup() { return cGroup; }
		
		//'operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//opType=OpType
		public Assignment getOpTypeAssignment_2() { return cOpTypeAssignment_2; }
		
		//OpType
		public RuleCall getOpTypeOpTypeParserRuleCall_2_0() { return cOpTypeOpTypeParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Sets the path where the data to retrieve is located
		//Source:
		//    'source=' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'source=' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'source='
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Sets the path of keys inside the file to get to the data to retrieve
		//Path:
		//    'path=' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'path=' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'path='
		public Keyword getPathKeyword_0() { return cPathKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class KeysToExtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.KeysToExtract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKeysToExtractAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKey1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKey1KeyParserRuleCall_2_0 = (RuleCall)cKey1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cKey1Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cKey1KeyParserRuleCall_3_1_0 = (RuleCall)cKey1Assignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Sets the list of keys to extract
		//KeysToExtract:
		//    {KeysToExtract} 'get=[' key1+=Key (',' key1+=Key)* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{KeysToExtract} 'get=[' key1+=Key (',' key1+=Key)* ']'
		public Group getGroup() { return cGroup; }
		
		//{KeysToExtract}
		public Action getKeysToExtractAction_0() { return cKeysToExtractAction_0; }
		
		//'get=['
		public Keyword getGetKeyword_1() { return cGetKeyword_1; }
		
		//key1+=Key
		public Assignment getKey1Assignment_2() { return cKey1Assignment_2; }
		
		//Key
		public RuleCall getKey1KeyParserRuleCall_2_0() { return cKey1KeyParserRuleCall_2_0; }
		
		//(',' key1+=Key)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//key1+=Key
		public Assignment getKey1Assignment_3_1() { return cKey1Assignment_3_1; }
		
		//Key
		public RuleCall getKey1KeyParserRuleCall_3_1_0() { return cKey1KeyParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.Key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameRenameParserRuleCall_1_1_0 = (RuleCall)cRenameAssignment_1_1.eContents().get(0);
		
		//// Defines a key and its rename
		//Key:
		//    name=STRING ('->' rename=Rename)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING ('->' rename=Rename)?
		public Group getGroup() { return cGroup; }
		
		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//('->' rename=Rename)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//rename=Rename
		public Assignment getRenameAssignment_1_1() { return cRenameAssignment_1_1; }
		
		//Rename
		public RuleCall getRenameRenameParserRuleCall_1_1_0() { return cRenameRenameParserRuleCall_1_1_0; }
	}
	public class RenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.Rename");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFullRenameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAddPrefixParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAddSuffixParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Sets the type of rename
		//Rename:
		//    FullRename | AddPrefix | AddSuffix
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FullRename | AddPrefix | AddSuffix
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FullRename
		public RuleCall getFullRenameParserRuleCall_0() { return cFullRenameParserRuleCall_0; }
		
		//AddPrefix
		public RuleCall getAddPrefixParserRuleCall_1() { return cAddPrefixParserRuleCall_1; }
		
		//AddSuffix
		public RuleCall getAddSuffixParserRuleCall_2() { return cAddSuffixParserRuleCall_2; }
	}
	public class RenameAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.RenameAll");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddPrefixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAddSuffixParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Sets a global rename for the extracted keys
		//RenameAll:
		//    AddPrefix | AddSuffix
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AddPrefix | AddSuffix
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddPrefix
		public RuleCall getAddPrefixParserRuleCall_0() { return cAddPrefixParserRuleCall_0; }
		
		//AddSuffix
		public RuleCall getAddSuffixParserRuleCall_1() { return cAddSuffixParserRuleCall_1; }
	}
	public class FullRenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.FullRename");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNNKeyword_2_0 = (Keyword)cNAssignment_2.eContents().get(0);
		
		//// To be used when a key's name is to be fully changed
		//FullRename:
		//    'rename=' name=STRING (n='N')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rename=' name=STRING (n='N')?
		public Group getGroup() { return cGroup; }
		
		//'rename='
		public Keyword getRenameKeyword_0() { return cRenameKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//(n='N')?
		public Assignment getNAssignment_2() { return cNAssignment_2; }
		
		//'N'
		public Keyword getNNKeyword_2_0() { return cNNKeyword_2_0; }
	}
	public class AddPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.AddPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrependKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// To be used when a key's rename is only adding a prefix
		//AddPrefix:
		//    'prepend=' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'prepend=' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'prepend='
		public Keyword getPrependKeyword_0() { return cPrependKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class AddSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.AddSuffix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// To be used when a key's rename is only adding a suffix
		//AddSuffix:
		//    'append=' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'append=' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'append='
		public Keyword getAppendKeyword_0() { return cAppendKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Sets the key that will be used as filter for the extraction of the top N or bottom N
		//Filter:
		//    'filter=' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'filter=' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'filter='
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class ThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.Threshold");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTopNParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBottomNParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Sets the number of keys to extract according to the filter key
		//Threshold:
		//    TopN | BottomN
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TopN | BottomN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TopN
		public RuleCall getTopNParserRuleCall_0() { return cTopNParserRuleCall_0; }
		
		//BottomN
		public RuleCall getBottomNParserRuleCall_1() { return cBottomNParserRuleCall_1; }
	}
	public class TopNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.TopN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//// To be used when the top N values of the filter key are wanted
		//TopN:
		//    'top=' value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'top=' value=INT
		public Group getGroup() { return cGroup; }
		
		//'top='
		public Keyword getTopKeyword_0() { return cTopKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class BottomNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.BottomN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBottomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//// To be used when the bottom N values of the filter key are wanted
		//BottomN:
		//    'bottom=' value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'bottom=' value=INT
		public Group getGroup() { return cGroup; }
		
		//'bottom='
		public Keyword getBottomKeyword_0() { return cBottomKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class OpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.dr.DataRetrieval.OpType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cAverageAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cAverageAverageKeyword_0_0_0 = (Keyword)cAverageAssignment_0_0.eContents().get(0);
		private final Assignment cSumAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cSumSumKeyword_0_1_0 = (Keyword)cSumAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAllAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cAllAllKeyword_1_0_0 = (Keyword)cAllAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cKey1Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cKey1KeyParserRuleCall_1_1_1_0 = (RuleCall)cKey1Assignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cKey1Assignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cKey1KeyParserRuleCall_1_1_2_1_0 = (RuleCall)cKey1Assignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//// Sets an operation to be performed on the table of extracted data
		//OpType:
		//    (average='average=' | sum='sum=') (all='all' | ('[' key1+=Key (',' key1+=Key)* ']'))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(average='average=' | sum='sum=') (all='all' | ('[' key1+=Key (',' key1+=Key)* ']'))
		public Group getGroup() { return cGroup; }
		
		//(average='average=' | sum='sum=')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//average='average='
		public Assignment getAverageAssignment_0_0() { return cAverageAssignment_0_0; }
		
		//'average='
		public Keyword getAverageAverageKeyword_0_0_0() { return cAverageAverageKeyword_0_0_0; }
		
		//sum='sum='
		public Assignment getSumAssignment_0_1() { return cSumAssignment_0_1; }
		
		//'sum='
		public Keyword getSumSumKeyword_0_1_0() { return cSumSumKeyword_0_1_0; }
		
		//(all='all' | ('[' key1+=Key (',' key1+=Key)* ']'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//all='all'
		public Assignment getAllAssignment_1_0() { return cAllAssignment_1_0; }
		
		//'all'
		public Keyword getAllAllKeyword_1_0_0() { return cAllAllKeyword_1_0_0; }
		
		//('[' key1+=Key (',' key1+=Key)* ']')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }
		
		//key1+=Key
		public Assignment getKey1Assignment_1_1_1() { return cKey1Assignment_1_1_1; }
		
		//Key
		public RuleCall getKey1KeyParserRuleCall_1_1_1_0() { return cKey1KeyParserRuleCall_1_1_1_0; }
		
		//(',' key1+=Key)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }
		
		//key1+=Key
		public Assignment getKey1Assignment_1_1_2_1() { return cKey1Assignment_1_1_2_1; }
		
		//Key
		public RuleCall getKey1KeyParserRuleCall_1_1_2_1_0() { return cKey1KeyParserRuleCall_1_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }
	}
	
	
	private final RetrieveElements pRetrieve;
	private final DestElements pDest;
	private final SourceFolderElements pSourceFolder;
	private final ConfigListElements pConfigList;
	private final OpListElements pOpList;
	private final SourceElements pSource;
	private final PathElements pPath;
	private final KeysToExtractElements pKeysToExtract;
	private final KeyElements pKey;
	private final RenameElements pRename;
	private final RenameAllElements pRenameAll;
	private final FullRenameElements pFullRename;
	private final AddPrefixElements pAddPrefix;
	private final AddSuffixElements pAddSuffix;
	private final FilterElements pFilter;
	private final ThresholdElements pThreshold;
	private final TopNElements pTopN;
	private final BottomNElements pBottomN;
	private final OpTypeElements pOpType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DataRetrievalGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRetrieve = new RetrieveElements();
		this.pDest = new DestElements();
		this.pSourceFolder = new SourceFolderElements();
		this.pConfigList = new ConfigListElements();
		this.pOpList = new OpListElements();
		this.pSource = new SourceElements();
		this.pPath = new PathElements();
		this.pKeysToExtract = new KeysToExtractElements();
		this.pKey = new KeyElements();
		this.pRename = new RenameElements();
		this.pRenameAll = new RenameAllElements();
		this.pFullRename = new FullRenameElements();
		this.pAddPrefix = new AddPrefixElements();
		this.pAddSuffix = new AddSuffixElements();
		this.pFilter = new FilterElements();
		this.pThreshold = new ThresholdElements();
		this.pTopN = new TopNElements();
		this.pBottomN = new BottomNElements();
		this.pOpType = new OpTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.dr.DataRetrieval".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Main rule
	//Retrieve:
	//    'retrieve' dest=Dest (sourceFolder=SourceFolder)? '{' configList+=ConfigList+ opList+=OpList* '}'
	//;
	public RetrieveElements getRetrieveAccess() {
		return pRetrieve;
	}
	
	public ParserRule getRetrieveRule() {
		return getRetrieveAccess().getRule();
	}
	
	//// Sets the path where the retrieved data will be written
	//Dest:
	//    'destination=' name=STRING
	//;
	public DestElements getDestAccess() {
		return pDest;
	}
	
	public ParserRule getDestRule() {
		return getDestAccess().getRule();
	}
	
	//// Can be used if there is an operation to be repeated for every directory inside a certain directory
	//SourceFolder:
	//    'folder=' name=STRING
	//;
	public SourceFolderElements getSourceFolderAccess() {
		return pSourceFolder;
	}
	
	public ParserRule getSourceFolderRule() {
		return getSourceFolderAccess().getRule();
	}
	
	//// List of configurations for data extraction
	//ConfigList:
	//    'extraction' '{' source=Source (path=Path)? (keysToExtract=KeysToExtract)? (renameAll=RenameAll)? (filter=Filter threshold=Threshold)?'}'
	//;
	public ConfigListElements getConfigListAccess() {
		return pConfigList;
	}
	
	public ParserRule getConfigListRule() {
		return getConfigListAccess().getRule();
	}
	
	//// List of operations to perform on the table of extracted data
	//OpList:
	//    'operation' '{' opType=OpType '}'
	//;
	public OpListElements getOpListAccess() {
		return pOpList;
	}
	
	public ParserRule getOpListRule() {
		return getOpListAccess().getRule();
	}
	
	//// Sets the path where the data to retrieve is located
	//Source:
	//    'source=' name=STRING
	//;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//// Sets the path of keys inside the file to get to the data to retrieve
	//Path:
	//    'path=' name=STRING
	//;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//// Sets the list of keys to extract
	//KeysToExtract:
	//    {KeysToExtract} 'get=[' key1+=Key (',' key1+=Key)* ']'
	//;
	public KeysToExtractElements getKeysToExtractAccess() {
		return pKeysToExtract;
	}
	
	public ParserRule getKeysToExtractRule() {
		return getKeysToExtractAccess().getRule();
	}
	
	//// Defines a key and its rename
	//Key:
	//    name=STRING ('->' rename=Rename)?
	//;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//// Sets the type of rename
	//Rename:
	//    FullRename | AddPrefix | AddSuffix
	//;
	public RenameElements getRenameAccess() {
		return pRename;
	}
	
	public ParserRule getRenameRule() {
		return getRenameAccess().getRule();
	}
	
	//// Sets a global rename for the extracted keys
	//RenameAll:
	//    AddPrefix | AddSuffix
	//;
	public RenameAllElements getRenameAllAccess() {
		return pRenameAll;
	}
	
	public ParserRule getRenameAllRule() {
		return getRenameAllAccess().getRule();
	}
	
	//// To be used when a key's name is to be fully changed
	//FullRename:
	//    'rename=' name=STRING (n='N')?
	//;
	public FullRenameElements getFullRenameAccess() {
		return pFullRename;
	}
	
	public ParserRule getFullRenameRule() {
		return getFullRenameAccess().getRule();
	}
	
	//// To be used when a key's rename is only adding a prefix
	//AddPrefix:
	//    'prepend=' name=STRING
	//;
	public AddPrefixElements getAddPrefixAccess() {
		return pAddPrefix;
	}
	
	public ParserRule getAddPrefixRule() {
		return getAddPrefixAccess().getRule();
	}
	
	//// To be used when a key's rename is only adding a suffix
	//AddSuffix:
	//    'append=' name=STRING
	//;
	public AddSuffixElements getAddSuffixAccess() {
		return pAddSuffix;
	}
	
	public ParserRule getAddSuffixRule() {
		return getAddSuffixAccess().getRule();
	}
	
	//// Sets the key that will be used as filter for the extraction of the top N or bottom N
	//Filter:
	//    'filter=' name=STRING
	//;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//// Sets the number of keys to extract according to the filter key
	//Threshold:
	//    TopN | BottomN
	//;
	public ThresholdElements getThresholdAccess() {
		return pThreshold;
	}
	
	public ParserRule getThresholdRule() {
		return getThresholdAccess().getRule();
	}
	
	//// To be used when the top N values of the filter key are wanted
	//TopN:
	//    'top=' value=INT
	//;
	public TopNElements getTopNAccess() {
		return pTopN;
	}
	
	public ParserRule getTopNRule() {
		return getTopNAccess().getRule();
	}
	
	//// To be used when the bottom N values of the filter key are wanted
	//BottomN:
	//    'bottom=' value=INT
	//;
	public BottomNElements getBottomNAccess() {
		return pBottomN;
	}
	
	public ParserRule getBottomNRule() {
		return getBottomNAccess().getRule();
	}
	
	//// Sets an operation to be performed on the table of extracted data
	//OpType:
	//    (average='average=' | sum='sum=') (all='all' | ('[' key1+=Key (',' key1+=Key)* ']'))
	//;
	public OpTypeElements getOpTypeAccess() {
		return pOpType;
	}
	
	public ParserRule getOpTypeRule() {
		return getOpTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
